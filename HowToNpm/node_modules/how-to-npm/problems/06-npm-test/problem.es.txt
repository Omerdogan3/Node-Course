As칤 que ya has instalado algo, y usado `npm ls` para ver
qu칠 es lo que hizo.

Si miras dentro del package.json, tiene esta parte medio exta침a:

  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },

npm se puede usar como algo que se llama "task runner", o sea,
un gestor de tareas. Esto se hace con la propiedas llamada "scripts".
Casi todos los paquetes y proyectos tendr치n una tarea de prueba
que ejecuta para verificar que todo est치 funcionando bien. Para
recordarte hacer esto, npm pone una prueba que "siempre falla" ah칤
cuando creas tu package.json.

Para crear tu propia prueba, primero crea un fichero llamado `test.js`.
Para los prop칩sitos de este taller, puedes dejarlo en blanco, pero aqu칤
es donde escribir칤as tus pruebas (esta es una clase de npm -- no de pruebas 游뱁)
La prueba tiene que terminar sin error, o si no npm entender치 que la prueba
en s칤 fall칩.

Entonces, edita tu `package.json` para que tu secci칩n se vea as칤:

  "scripts": {
    "test": "node test.js"
  },

Cuando termines, y guardes el fichero, haz `$ADVENTURE_COMMAND verify`
para verificar que lo hiciste bien.

Adicionalmente: Si quieres ejecutar cualquier prueba que hayas escrito en
`test.js`, simplemente puedes haces `npm test`, y npm har치 lo que esperas.

La documentaci칩n para `scripts` se encuentra en `npm help scripts`.
